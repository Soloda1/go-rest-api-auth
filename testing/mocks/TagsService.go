// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	database "go-rest-api-auth/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// TagsService is an autogenerated mock type for the TagsService type
type TagsService struct {
	mock.Mock
}

// CreatePostTagsRelation provides a mock function with given fields: tag, post
func (_m *TagsService) CreatePostTagsRelation(tag database.TagsDTO, post database.PostDTO) error {
	ret := _m.Called(tag, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePostTagsRelation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(database.TagsDTO, database.PostDTO) error); ok {
		r0 = rf(tag, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTag provides a mock function with given fields: tag
func (_m *TagsService) CreateTag(tag database.TagsDTO) (database.TagsDTO, error) {
	ret := _m.Called(tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 database.TagsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(database.TagsDTO) (database.TagsDTO, error)); ok {
		return rf(tag)
	}
	if rf, ok := ret.Get(0).(func(database.TagsDTO) database.TagsDTO); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Get(0).(database.TagsDTO)
	}

	if rf, ok := ret.Get(1).(func(database.TagsDTO) error); ok {
		r1 = rf(tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePostTagsRelation provides a mock function with given fields: postId
func (_m *TagsService) DeletePostTagsRelation(postId int) error {
	ret := _m.Called(postId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePostTagsRelation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: tagID
func (_m *TagsService) DeleteTag(tagID int) error {
	ret := _m.Called(tagID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetALlTags provides a mock function with given fields:
func (_m *TagsService) GetALlTags() ([]database.TagsDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetALlTags")
	}

	var r0 []database.TagsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]database.TagsDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []database.TagsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.TagsDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostTagsRelation provides a mock function with given fields: postID
func (_m *TagsService) GetPostTagsRelation(postID int) ([]database.TagsDTO, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostTagsRelation")
	}

	var r0 []database.TagsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]database.TagsDTO, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(int) []database.TagsDTO); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.TagsDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagByID provides a mock function with given fields: tagID
func (_m *TagsService) GetTagByID(tagID int) (database.TagsDTO, error) {
	ret := _m.Called(tagID)

	if len(ret) == 0 {
		panic("no return value specified for GetTagByID")
	}

	var r0 database.TagsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (database.TagsDTO, error)); ok {
		return rf(tagID)
	}
	if rf, ok := ret.Get(0).(func(int) database.TagsDTO); ok {
		r0 = rf(tagID)
	} else {
		r0 = ret.Get(0).(database.TagsDTO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagByName provides a mock function with given fields: tagName
func (_m *TagsService) GetTagByName(tagName string) (database.TagsDTO, error) {
	ret := _m.Called(tagName)

	if len(ret) == 0 {
		panic("no return value specified for GetTagByName")
	}

	var r0 database.TagsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (database.TagsDTO, error)); ok {
		return rf(tagName)
	}
	if rf, ok := ret.Get(0).(func(string) database.TagsDTO); ok {
		r0 = rf(tagName)
	} else {
		r0 = ret.Get(0).(database.TagsDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tagName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTagsService creates a new instance of TagsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagsService {
	mock := &TagsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
