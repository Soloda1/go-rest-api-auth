// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	auth "go-rest-api-auth/internal/database/auth"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JwtManager is an autogenerated mock type for the JwtManager type
type JwtManager struct {
	mock.Mock
}

// DeleteRefreshToken provides a mock function with given fields: userID
func (_m *JwtManager) DeleteRefreshToken(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateJWT provides a mock function with given fields: userId, tokenType, ttl
func (_m *JwtManager) GenerateJWT(userId string, tokenType string, ttl time.Duration) (string, error) {
	ret := _m.Called(userId, tokenType, ttl)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) (string, error)); ok {
		return rf(userId, tokenType, ttl)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) string); ok {
		r0 = rf(userId, tokenType, ttl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(userId, tokenType, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: userID
func (_m *JwtManager) GetRefreshToken(userID int) (auth.RefreshTokenDTO, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 auth.RefreshTokenDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (auth.RefreshTokenDTO, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) auth.RefreshTokenDTO); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(auth.RefreshTokenDTO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetterAccessExpiresAt provides a mock function with given fields:
func (_m *JwtManager) GetterAccessExpiresAt() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetterAccessExpiresAt")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetterRefreshExpiresAt provides a mock function with given fields:
func (_m *JwtManager) GetterRefreshExpiresAt() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetterRefreshExpiresAt")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// IsRefreshTokenValid provides a mock function with given fields: refreshToken
func (_m *JwtManager) IsRefreshTokenValid(refreshToken string) (bool, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for IsRefreshTokenValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRefreshToken provides a mock function with given fields: refreshToken
func (_m *JwtManager) SaveRefreshToken(refreshToken string) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateJWT provides a mock function with given fields: reqToken, expectedType
func (_m *JwtManager) ValidateJWT(reqToken string, expectedType string) (jwt.MapClaims, error) {
	ret := _m.Called(reqToken, expectedType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWT")
	}

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (jwt.MapClaims, error)); ok {
		return rf(reqToken, expectedType)
	}
	if rf, ok := ret.Get(0).(func(string, string) jwt.MapClaims); ok {
		r0 = rf(reqToken, expectedType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(reqToken, expectedType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJwtManager creates a new instance of JwtManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtManager {
	mock := &JwtManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
