// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	database "go-rest-api-auth/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: post
func (_m *PostService) CreatePost(post database.PostDTO) (database.PostDTO, error) {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 database.PostDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(database.PostDTO) (database.PostDTO, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(database.PostDTO) database.PostDTO); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(database.PostDTO)
	}

	if rf, ok := ret.Get(1).(func(database.PostDTO) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: postID
func (_m *PostService) DeletePost(postID int) error {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetALlPosts provides a mock function with given fields:
func (_m *PostService) GetALlPosts() ([]database.PostDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetALlPosts")
	}

	var r0 []database.PostDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]database.PostDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []database.PostDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.PostDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: postID
func (_m *PostService) GetPost(postID int) (database.PostDTO, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 database.PostDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (database.PostDTO, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(int) database.PostDTO); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Get(0).(database.PostDTO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: post
func (_m *PostService) UpdatePost(post database.PostDTO) error {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(database.PostDTO) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
